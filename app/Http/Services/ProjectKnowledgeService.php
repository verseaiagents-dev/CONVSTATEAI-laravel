<?php

namespace App\Http\Services;

use App\Models\Project;
use App\Models\KnowledgeBase;
use App\Models\KnowledgeChunk;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

class ProjectKnowledgeService
{
    /**
     * Project'e √∂zel knowledge base bilgilerini getir
     */
    public function getProjectKnowledge(int $projectId): array
    {
        try {
            $project = Project::with(['knowledgeBases.chunks'])->find($projectId);
            
            if (!$project) {
                return [
                    'success' => false,
                    'message' => 'Project bulunamadƒ±',
                    'data' => []
                ];
            }

            $knowledgeData = [
                'project_info' => [
                    'name' => $project->name,
                    'description' => $project->description,
                    'url' => $project->url,
                    'status' => $project->status,
                    'created_at' => $project->created_at
                ],
                'knowledge_bases' => [],
                'total_chunks' => 0,
                'active_knowledge_bases' => 0
            ];

            foreach ($project->knowledgeBases as $kb) {
                if ($kb->is_active) {
                    $knowledgeData['active_knowledge_bases']++;
                    
                    $kbData = [
                        'id' => $kb->id,
                        'name' => $kb->name,
                        'description' => $kb->description,
                        'source_type' => $kb->source_type,
                        'total_chunks' => $kb->chunks->count(),
                        'processed_records' => $kb->processed_records,
                        'last_processed' => $kb->last_processed_at,
                        'chunks' => $kb->chunks->take(10)->map(function($chunk) {
                            return [
                                'id' => $chunk->id,
                                'content' => $chunk->content,
                                'metadata' => $chunk->metadata,
                                'created_at' => $chunk->created_at
                            ];
                        })->toArray()
                    ];
                    
                    $knowledgeData['knowledge_bases'][] = $kbData;
                    $knowledgeData['total_chunks'] += $kb->chunks->count();
                }
            }

            return [
                'success' => true,
                'message' => 'Project knowledge base bilgileri ba≈üarƒ±yla getirildi',
                'data' => $knowledgeData
            ];

        } catch (\Exception $e) {
            Log::error('ProjectKnowledgeService getProjectKnowledge error: ' . $e->getMessage());
            return [
                'success' => false,
                'message' => 'Knowledge base bilgileri alƒ±nƒ±rken hata olu≈ütu',
                'data' => []
            ];
        }
    }

    /**
     * Project'e √∂zel funnel intent response'larƒ± i√ßin knowledge base'den bilgi √ßek
     */
    public function getProjectSpecificResponse(int $projectId, string $intent, string $userMessage = ''): array
    {
        try {
            $project = Project::with(['knowledgeBases.chunks'])->find($projectId);
            
            if (!$project) {
                return $this->getDefaultResponse($intent);
            }

            $knowledgeData = $this->getProjectKnowledge($projectId);
            
            if (!$knowledgeData['success']) {
                return $this->getDefaultResponse($intent);
            }

            $projectInfo = $knowledgeData['data']['project_info'];
            $knowledgeBases = $knowledgeData['data']['knowledge_bases'];

            // Intent'e g√∂re project-specific response olu≈ütur
            switch ($intent) {
                case 'capabilities_inquiry':
                    return $this->generateCapabilitiesResponse($projectInfo, $knowledgeBases);
                
                case 'project_info':
                    return $this->generateProjectInfoResponse($projectInfo, $knowledgeBases);
                
                case 'conversion_guidance':
                    return $this->generateConversionGuidanceResponse($projectInfo, $knowledgeBases);
                
                case 'pricing_guidance':
                    return $this->generatePricingGuidanceResponse($projectInfo, $knowledgeBases);
                
                case 'demo_request':
                    return $this->generateDemoRequestResponse($projectInfo, $knowledgeBases);
                
                case 'contact_request':
                    return $this->generateContactRequestResponse($projectInfo, $knowledgeBases);
                
                case 'product_recommendations':
                    return $this->generateProductRecommendationsResponse($projectInfo, $knowledgeBases, $userMessage);
                
                default:
                    return $this->getDefaultResponse($intent);
            }

        } catch (\Exception $e) {
            Log::error('ProjectKnowledgeService getProjectSpecificResponse error: ' . $e->getMessage());
            return $this->getDefaultResponse($intent);
        }
    }

    /**
     * Capabilities inquiry i√ßin project-specific response
     */
    private function generateCapabilitiesResponse(array $projectInfo, array $knowledgeBases): array
    {
        $capabilities = [
            'üîç **√úr√ºn Arama & Ke≈üif**',
            '‚Ä¢ 15+ kategoride 500+ √ºr√ºn arasƒ±nda arama',
            '‚Ä¢ Marka, fiyat, √∂zellik bazlƒ± filtreleme',
            '‚Ä¢ Akƒ±llƒ± √ºr√ºn √∂nerileri',
            '',
            'üí∞ **Fiyat & Stok Bilgisi**',
            '‚Ä¢ Anlƒ±k fiyat sorgulama',
            '‚Ä¢ Stok durumu kontrol√º',
            '‚Ä¢ Fiyat kar≈üƒ±la≈ütƒ±rmasƒ±',
            '',
            'üì¶ **Sipari≈ü & Kargo**',
            '‚Ä¢ Sipari≈ü takibi',
            '‚Ä¢ Kargo durumu sorgulama',
            '‚Ä¢ Sipari≈ü ge√ßmi≈üi',
            '',
            'üéØ **Ki≈üisel √ñneriler**',
            '‚Ä¢ Ge√ßmi≈ü alƒ±≈üveri≈ülere g√∂re √∂neriler',
            '‚Ä¢ Benzer √ºr√ºn √∂nerileri',
            '‚Ä¢ Trend √ºr√ºnler',
            '',
            'üí¨ **Destek & ƒ∞leti≈üim**',
            '‚Ä¢ 7/24 canlƒ± destek',
            '‚Ä¢ WhatsApp desteƒüi',
            '‚Ä¢ Video call danƒ±≈ümanlƒ±k'
        ];

        // Project-specific bilgiler ekle
        if (!empty($projectInfo['name'])) {
            array_unshift($capabilities, "**{$projectInfo['name']}** projesi i√ßin √∂zel yetenekler:");
            array_unshift($capabilities, '');
        }

        // Knowledge base'den √∂zel yetenekler ekle
        foreach ($knowledgeBases as $kb) {
            if (strpos(strtolower($kb['name']), '√∂zellik') !== false || 
                strpos(strtolower($kb['name']), 'yetenek') !== false) {
                $capabilities[] = '';
                $capabilities[] = "**{$kb['name']}:**";
                foreach (array_slice($kb['chunks'], 0, 3) as $chunk) {
                    $capabilities[] = "‚Ä¢ " . substr($chunk['content'], 0, 100) . "...";
                }
            }
        }

        return [
            'type' => 'capabilities_inquiry',
            'message' => implode("\n", $capabilities),
            'suggestions' => [
                '√úr√ºn arama',
                'Fiyat sorgula',
                'Sipari≈ü takip',
                'Demo talep et',
                'ƒ∞leti≈üim kur'
            ],
            'data' => [
                'project_name' => $projectInfo['name'] ?? 'Proje',
                'total_knowledge_bases' => count($knowledgeBases),
                'widget_type' => 'capabilities_display'
            ]
        ];
    }

    /**
     * Project info i√ßin project-specific response
     */
    private function generateProjectInfoResponse(array $projectInfo, array $knowledgeBases): array
    {
        $info = [
            "**{$projectInfo['name']}** hakkƒ±nda bilgiler:",
            '',
            "üìã **Proje Detaylarƒ±:**",
            "‚Ä¢ **A√ßƒ±klama:** " . ($projectInfo['description'] ?? 'A√ßƒ±klama bulunmuyor'),
            "‚Ä¢ **Website:** " . ($projectInfo['url'] ?? 'URL bulunmuyor'),
            "‚Ä¢ **Durum:** " . ($projectInfo['status'] ?? 'Bilinmiyor'),
            "‚Ä¢ **Olu≈üturulma:** " . ($projectInfo['created_at'] ?? 'Bilinmiyor'),
            '',
            "üìö **Knowledge Base Bilgileri:**",
            "‚Ä¢ **Toplam Knowledge Base:** " . count($knowledgeBases),
            "‚Ä¢ **Toplam Chunk:** " . array_sum(array_column($knowledgeBases, 'total_chunks'))
        ];

        // Knowledge base'den √∂zel bilgiler ekle
        foreach ($knowledgeBases as $kb) {
            if (strpos(strtolower($kb['name']), 'hakkƒ±nda') !== false || 
                strpos(strtolower($kb['name']), 'bilgi') !== false) {
                $info[] = '';
                $info[] = "**{$kb['name']}:**";
                foreach (array_slice($kb['chunks'], 0, 2) as $chunk) {
                    $info[] = "‚Ä¢ " . substr($chunk['content'], 0, 150) . "...";
                }
            }
        }

        return [
            'type' => 'project_info',
            'message' => implode("\n", $info),
            'suggestions' => [
                'Yeteneklerini √∂ƒüren',
                'Fiyat bilgisi al',
                'Demo talep et',
                'ƒ∞leti≈üim kur'
            ],
            'data' => [
                'project_info' => $projectInfo,
                'knowledge_bases' => $knowledgeBases,
                'widget_type' => 'project_info_display'
            ]
        ];
    }

    /**
     * Conversion guidance i√ßin project-specific response
     */
    private function generateConversionGuidanceResponse(array $projectInfo, array $knowledgeBases): array
    {
        $guidance = [
            "**{$projectInfo['name']}** ile m√º≈üteri olmak i√ßin adƒ±mlar:",
            '',
            "üöÄ **Hƒ±zlƒ± Ba≈ülangƒ±√ß:**",
            "1. **√úr√ºn Ke≈üfi:** Size uygun √ºr√ºnleri bulun",
            "2. **Fiyat Kar≈üƒ±la≈ütƒ±rmasƒ±:** En uygun fiyatlarƒ± inceleyin",
            "3. **Demo Talep:** √úr√ºnleri yakƒ±ndan g√∂r√ºn",
            "4. **Sipari≈ü Ver:** G√ºvenli √∂deme ile satƒ±n alƒ±n",
            '',
            "üí° **√ñneriler:**",
            "‚Ä¢ Size √∂zel √ºr√ºn √∂nerilerimizi inceleyin",
            "‚Ä¢ Kampanya ve indirimleri takip edin",
            "‚Ä¢ Canlƒ± destekten yardƒ±m alƒ±n"
        ];

        // Knowledge base'den conversion bilgileri ekle
        foreach ($knowledgeBases as $kb) {
            if (strpos(strtolower($kb['name']), 'sipari≈ü') !== false || 
                strpos(strtolower($kb['name']), 'satƒ±n') !== false ||
                strpos(strtolower($kb['name']), 'rehber') !== false) {
                $guidance[] = '';
                $guidance[] = "**{$kb['name']}:**";
                foreach (array_slice($kb['chunks'], 0, 2) as $chunk) {
                    $guidance[] = "‚Ä¢ " . substr($chunk['content'], 0, 120) . "...";
                }
            }
        }

        return [
            'type' => 'conversion_guidance',
            'message' => implode("\n", $guidance),
            'suggestions' => [
                '√úr√ºn ara',
                'Fiyat sorgula',
                'Demo talep et',
                'Sipari≈ü ver',
                'ƒ∞leti≈üim kur'
            ],
            'data' => [
                'project_name' => $projectInfo['name'] ?? 'Proje',
                'conversion_steps' => [
                    'discovery' => '√úr√ºn ke≈üfi',
                    'comparison' => 'Fiyat kar≈üƒ±la≈ütƒ±rmasƒ±',
                    'demo' => 'Demo talep',
                    'purchase' => 'Sipari≈ü verme'
                ],
                'widget_type' => 'conversion_guidance_display'
            ]
        ];
    }

    /**
     * Pricing guidance i√ßin project-specific response
     */
    private function generatePricingGuidanceResponse(array $projectInfo, array $knowledgeBases): array
    {
        $pricing = [
            "**{$projectInfo['name']}** fiyat bilgileri:",
            '',
            "üí∞ **Fiyat Se√ßenekleri:**",
            "‚Ä¢ **Temel Paket:** Uygun fiyatlƒ± ba≈ülangƒ±√ß",
            "‚Ä¢ **Pro Paket:** Geli≈ümi≈ü √∂zellikler",
            "‚Ä¢ **Premium Paket:** T√ºm √∂zellikler + destek",
            '',
            "üí≥ **√ñdeme Se√ßenekleri:**",
            "‚Ä¢ Kredi kartƒ± ile tek seferde √∂deme",
            "‚Ä¢ Taksitli √∂deme se√ßenekleri",
            "‚Ä¢ Kurumsal faturalandƒ±rma",
            '',
            "üéÅ **√ñzel Fƒ±rsatlar:**",
            "‚Ä¢ ƒ∞lk sipari≈ü indirimi",
            "‚Ä¢ Toplu alƒ±m avantajlarƒ±",
            "‚Ä¢ Referans bonusu"
        ];

        // Knowledge base'den fiyat bilgileri ekle
        foreach ($knowledgeBases as $kb) {
            if (strpos(strtolower($kb['name']), 'fiyat') !== false || 
                strpos(strtolower($kb['name']), '√ºcret') !== false ||
                strpos(strtolower($kb['name']), 'paket') !== false) {
                $pricing[] = '';
                $pricing[] = "**{$kb['name']}:**";
                foreach (array_slice($kb['chunks'], 0, 2) as $chunk) {
                    $pricing[] = "‚Ä¢ " . substr($chunk['content'], 0, 120) . "...";
                }
            }
        }

        return [
            'type' => 'pricing_guidance',
            'message' => implode("\n", $pricing),
            'suggestions' => [
                'Paket detaylarƒ±',
                '√ñdeme se√ßenekleri',
                'Demo talep et',
                'Sipari≈ü ver',
                'ƒ∞leti≈üim kur'
            ],
            'data' => [
                'project_name' => $projectInfo['name'] ?? 'Proje',
                'pricing_tiers' => [
                    'basic' => 'Temel Paket',
                    'pro' => 'Pro Paket',
                    'premium' => 'Premium Paket'
                ],
                'widget_type' => 'pricing_guidance_display'
            ]
        ];
    }

    /**
     * Demo request i√ßin project-specific response
     */
    private function generateDemoRequestResponse(array $projectInfo, array $knowledgeBases): array
    {
        $demo = [
            "**{$projectInfo['name']}** demo talep s√ºreci:",
            '',
            "üéØ **Demo Se√ßenekleri:**",
            "‚Ä¢ **Canlƒ± Demo:** Uzmanƒ±mƒ±zla birebir g√∂r√º≈üme",
            "‚Ä¢ **Video Demo:** Hazƒ±r tanƒ±tƒ±m videolarƒ±",
            "‚Ä¢ **Test Ortamƒ±:** Kendi ba≈üƒ±nƒ±za deneme",
            '',
            "üìÖ **Randevu Se√ßenekleri:**",
            "‚Ä¢ Hemen ≈üimdi ba≈ülayƒ±n",
            "‚Ä¢ Uygun zamanƒ±nƒ±zda planlayƒ±n",
            "‚Ä¢ Kurumsal sunum talep edin",
            '',
            "üí° **Demo ƒ∞√ßeriƒüi:**",
            "‚Ä¢ Temel √∂zellikler tanƒ±tƒ±mƒ±",
            "‚Ä¢ Ger√ßek kullanƒ±m senaryolarƒ±",
            "‚Ä¢ Soru-cevap b√∂l√ºm√º"
        ];

        return [
            'type' => 'demo_request',
            'message' => implode("\n", $demo),
            'suggestions' => [
                'Canlƒ± demo talep et',
                'Video demo izle',
                'Test ortamƒ±na eri≈ü',
                'Randevu planla',
                'ƒ∞leti≈üim kur'
            ],
            'data' => [
                'project_name' => $projectInfo['name'] ?? 'Proje',
                'demo_types' => [
                    'live' => 'Canlƒ± Demo',
                    'video' => 'Video Demo',
                    'test' => 'Test Ortamƒ±'
                ],
                'widget_type' => 'demo_request_display'
            ]
        ];
    }

    /**
     * Contact request i√ßin project-specific response
     */
    private function generateContactRequestResponse(array $projectInfo, array $knowledgeBases): array
    {
        $contact = [
            "**{$projectInfo['name']}** ile ileti≈üim se√ßenekleri:",
            '',
            "üìû **ƒ∞leti≈üim Kanallarƒ±:**",
            "‚Ä¢ **Telefon:** +90 (212) 555-0123",
            "‚Ä¢ **Email:** info@{$projectInfo['name']}.com",
            "‚Ä¢ **WhatsApp:** +90 (212) 555-0123",
            "‚Ä¢ **Canlƒ± Chat:** 7/24 aktif",
            '',
            "üïí **√áalƒ±≈üma Saatleri:**",
            "‚Ä¢ Pazartesi-Cuma: 09:00-18:00",
            "‚Ä¢ Cumartesi: 10:00-16:00",
            "‚Ä¢ Pazar: Kapalƒ±",
            '',
            "üí¨ **Destek T√ºrleri:**",
            "‚Ä¢ Teknik destek",
            "‚Ä¢ Satƒ±≈ü danƒ±≈ümanlƒ±ƒüƒ±",
            "‚Ä¢ Genel bilgi"
        ];

        return [
            'type' => 'contact_request',
            'message' => implode("\n", $contact),
            'suggestions' => [
                'Telefon ara',
                'Email g√∂nder',
                'WhatsApp mesaj',
                'Canlƒ± chat',
                'Randevu al'
            ],
            'data' => [
                'project_name' => $projectInfo['name'] ?? 'Proje',
                'contact_options' => [
                    'phone' => '+90 (212) 555-0123',
                    'email' => "info@{$projectInfo['name']}.com",
                    'whatsapp' => '+90 (212) 555-0123',
                    'live_chat' => '7/24 aktif'
                ],
                'widget_type' => 'contact_request_display'
            ]
        ];
    }

    /**
     * Product recommendations i√ßin project-specific response
     */
    private function generateProductRecommendationsResponse(array $projectInfo, array $knowledgeBases, string $userMessage): array
    {
        $recommendations = [
            "**{$projectInfo['name']}** i√ßin size √∂zel √∂neriler:",
            '',
            "üéØ **Pop√ºler √úr√ºnler:**",
            "‚Ä¢ En √ßok tercih edilen √ºr√ºnler",
            "‚Ä¢ M√º≈üteri yorumlarƒ± ile desteklenen",
            "‚Ä¢ Fiyat-performans liderleri",
            '',
            "‚≠ê **√ñne √áƒ±kanlar:**",
            "‚Ä¢ Yeni eklenen √ºr√ºnler",
            "‚Ä¢ √ñzel indirimli √ºr√ºnler",
            "‚Ä¢ Sƒ±nƒ±rlƒ± sayƒ±da stok",
            '',
            "üîç **Ki≈üisel √ñneriler:**",
            "‚Ä¢ Ge√ßmi≈ü tercihlerinize g√∂re",
            "‚Ä¢ Benzer m√º≈üterilerin se√ßtikleri",
            "‚Ä¢ Size √∂zel fƒ±rsatlar"
        ];

        // Knowledge base'den √ºr√ºn √∂nerileri ekle
        foreach ($knowledgeBases as $kb) {
            if (strpos(strtolower($kb['name']), '√ºr√ºn') !== false || 
                strpos(strtolower($kb['name']), '√∂neri') !== false ||
                strpos(strtolower($kb['name']), 'pop√ºler') !== false) {
                $recommendations[] = '';
                $recommendations[] = "**{$kb['name']}:**";
                foreach (array_slice($kb['chunks'], 0, 2) as $chunk) {
                    $recommendations[] = "‚Ä¢ " . substr($chunk['content'], 0, 120) . "...";
                }
            }
        }

        return [
            'type' => 'product_recommendations',
            'message' => implode("\n", $recommendations),
            'suggestions' => [
                '√úr√ºn detaylarƒ±',
                'Fiyat sorgula',
                'Kar≈üƒ±la≈ütƒ±r',
                'Sepete ekle',
                'Demo talep et'
            ],
            'data' => [
                'project_name' => $projectInfo['name'] ?? 'Proje',
                'recommendation_types' => [
                    'popular' => 'Pop√ºler √úr√ºnler',
                    'featured' => '√ñne √áƒ±kanlar',
                    'personal' => 'Ki≈üisel √ñneriler'
                ],
                'widget_type' => 'product_recommendations_display'
            ]
        ];
    }

    /**
     * Default response (knowledge base yoksa)
     */
    private function getDefaultResponse(string $intent): array
    {
        return [
            'type' => $intent,
            'message' => 'Bu intent i√ßin project-specific bilgi bulunamadƒ±. Genel bilgi almak i√ßin l√ºtfen tekrar deneyin.',
            'suggestions' => ['Yeniden dene', 'Genel bilgi al', 'ƒ∞leti≈üim kur'],
            'data' => [
                'widget_type' => 'default_response',
                'fallback' => true
            ]
        ];
    }
}
